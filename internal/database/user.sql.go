// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (created_at, updated_at, email, hashed_passowrd)
VALUES (
  NOW(),
  NOW(),
  $1,
  $2
)
RETURNING id, created_at, updated_at, email, hashed_passowrd
`

type CreateUserParams struct {
	Email          string
	HashedPassowrd string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassowrd)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassowrd,
	)
	return i, err
}

const getUserWithEmail = `-- name: GetUserWithEmail :one
SELECT id, created_at, updated_at, email, hashed_passowrd FROM users 
WHERE email = $1
`

func (q *Queries) GetUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassowrd,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE FROM users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const updateUserEmailAndPassword = `-- name: UpdateUserEmailAndPassword :one
UPDATE users 
SET email = $1, hashed_passowrd = $2
WHERE id = $3
RETURNING id, created_at, updated_at, email, hashed_passowrd
`

type UpdateUserEmailAndPasswordParams struct {
	Email          string
	HashedPassowrd string
	ID             uuid.UUID
}

func (q *Queries) UpdateUserEmailAndPassword(ctx context.Context, arg UpdateUserEmailAndPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmailAndPassword, arg.Email, arg.HashedPassowrd, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassowrd,
	)
	return i, err
}
